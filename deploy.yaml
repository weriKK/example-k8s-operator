# apiVersion: v1
# kind: Namespace
# metadata:
#   labels:
#     control-plane: controller-manager
#   name: memcached-operator-system
# ---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.6.1
  creationTimestamp: null
  name: memcacheds.cache.example.com
spec:
  group: cache.example.com
  names:
    kind: Memcached
    listKind: MemcachedList
    plural: memcacheds
    singular: memcached
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: Memcached is the Schema for the memcacheds API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: MemcachedSpec defines the desired state of Memcached
            properties:
              foo:
                description: Foo is an example field of Memcached. Edit memcached_types.go to remove/update
                type: string
              size:
                description: Size is the size of the memcached deployment
                format: int32
                minimum: 0
                type: integer
            required:
            - size
            type: object
          status:
            description: MemcachedStatus defines the observed state of Memcached
            properties:
              nodes:
                description: Nodes are the names of the memcached pods
                items:
                  type: string
                type: array
            required:
            - nodes
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
# apiVersion: v1
# kind: ServiceAccount
# metadata:
#   name: memcached-operator-controller-manager
#   namespace: memcached-operator-system
---
# apiVersion: rbac.authorization.k8s.io/v1
# kind: Role
# metadata:
#   name: memcached-operator-leader-election-role
#   namespace: kova
# rules:
# - apiGroups:
#   - ""
#   resources:
#   - configmaps
#   verbs:
#   - get
#   - list
#   - watch
#   - create
#   - update
#   - patch
#   - delete
# - apiGroups:
#   - coordination.k8s.io
#   resources:
#   - leases
#   verbs:
#   - get
#   - list
#   - watch
#   - create
#   - update
#   - patch
#   - delete
# - apiGroups:
#   - ""
#   resources:
#   - events
#   verbs:
#   - create
#   - patch
---
# apiVersion: rbac.authorization.k8s.io/v1
# kind: Role
# metadata:
#   creationTimestamp: null
#   name: memcached-operator-manager-role
#   namespace: kova
# rules:
# - apiGroups:
#   - apps
#   resources:
#   - deployments
#   verbs:
#   - create
#   - delete
#   - get
#   - list
#   - patch
#   - update
#   - watch
# - apiGroups:
#   - cache.example.com
#   resources:
#   - memcacheds
#   verbs:
#   - create
#   - delete
#   - get
#   - list
#   - patch
#   - update
#   - watch
# - apiGroups:
#   - cache.example.com
#   resources:
#   - memcacheds/finalizers
#   verbs:
#   - update
# - apiGroups:
#   - cache.example.com
#   resources:
#   - memcacheds/status
#   verbs:
#   - get
#   - patch
#   - update
# - apiGroups:
#   - ""
#   resources:
#   - pods
#   verbs:
#   - get
#   - list
#   - watch
---
# apiVersion: rbac.authorization.k8s.io/v1
# kind: ClusterRole
# metadata:
#   name: memcached-operator-metrics-reader
# rules:
# - nonResourceURLs:
#   - /metrics
#   verbs:
#   - get
---
# apiVersion: rbac.authorization.k8s.io/v1
# kind: ClusterRole
# metadata:
#   name: memcached-operator-proxy-role
# rules:
# - apiGroups:
#   - authentication.k8s.io
#   resources:
#   - tokenreviews
#   verbs:
#   - create
# - apiGroups:
#   - authorization.k8s.io
#   resources:
#   - subjectaccessreviews
#   verbs:
#   - create
---
# apiVersion: rbac.authorization.k8s.io/v1
# kind: RoleBinding
# metadata:
#   name: memcached-operator-leader-election-rolebinding
#   namespace: kova
# roleRef:
#   apiGroup: rbac.authorization.k8s.io
#   kind: Role
#   name: memcached-operator-leader-election-role
# subjects:
# - kind: ServiceAccount
#   name: kova-namespace-user
#   namespace: kova
---
# apiVersion: rbac.authorization.k8s.io/v1
# kind: RoleBinding
# metadata:
#   name: memcached-operator-manager-rolebinding
#   namespace: kova
# roleRef:
#   apiGroup: rbac.authorization.k8s.io
#   kind: Role
#   name: memcached-operator-manager-role
# subjects:
# - kind: ServiceAccount
#   name: kova-namespace-user
#   namespace: kova
---
# apiVersion: rbac.authorization.k8s.io/v1
# kind: ClusterRoleBinding
# metadata:
#   name: memcached-operator-proxy-rolebinding
# roleRef:
#   apiGroup: rbac.authorization.k8s.io
#   kind: ClusterRole
#   name: memcached-operator-proxy-role
# subjects:
# - kind: ServiceAccount
#   name: kova-namespace-user
#   namespace: kova
---
apiVersion: v1
data:
  controller_manager_config.yaml: |
    apiVersion: controller-runtime.sigs.k8s.io/v1alpha1
    kind: ControllerManagerConfig
    health:
      healthProbeBindAddress: :8081
    metrics:
      bindAddress: 127.0.0.1:8080
    webhook:
      port: 9443
    leaderElection:
      leaderElect: true
      resourceName: 86f835c3.example.com
kind: ConfigMap
metadata:
  name: memcached-operator-manager-config
  namespace: kova
---
apiVersion: v1
kind: Service
metadata:
  labels:
    control-plane: controller-manager
  name: memcached-operator-controller-manager-metrics-service
  namespace: kova
spec:
  ports:
  - name: https
    port: 8443
    targetPort: https
  selector:
    control-plane: controller-manager
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    control-plane: controller-manager
  name: memcached-operator-controller-manager
  namespace: kova
spec:
  replicas: 1
  selector:
    matchLabels:
      control-plane: controller-manager
  template:
    metadata:
      labels:
        control-plane: controller-manager
    spec:
      containers:
      - args:
        - --secure-listen-address=0.0.0.0:8443
        - --upstream=http://127.0.0.1:8080/
        - --logtostderr=true
        - --v=10
        image: gcr.io/kubebuilder/kube-rbac-proxy:v0.8.0
        name: kube-rbac-proxy
        ports:
        - containerPort: 8443
          name: https
      - args:
        - --health-probe-bind-address=:8081
        - --metrics-bind-address=127.0.0.1:8080
        - --leader-elect
        command:
        - /manager
        env:
        - name: WATCH_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        image: kovacontroller/controller:latest
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
          initialDelaySeconds: 15
          periodSeconds: 20
        name: manager
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8081
          initialDelaySeconds: 5
          periodSeconds: 10
        resources:
          limits:
            cpu: 100m
            memory: 30Mi
          requests:
            cpu: 100m
            memory: 20Mi
        securityContext:
          allowPrivilegeEscalation: false
      securityContext:
        runAsNonRoot: true
      serviceAccountName: kova-namespace-user
      terminationGracePeriodSeconds: 10
